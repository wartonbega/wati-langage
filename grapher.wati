inclue "std.wati";
inclue "w_graphs/wati_graphs_events.wati";

fonction max (a, b) fait 
    si a > b alors 
        renvoie a;
    sinon 
        renvoie b;
    fin
fin

classe grapher contient
    methode constructeur (func) fait 
        self.non_tracee = 1;
        self.func = func;
        self.decalx = 200;
        self.decaly = 300;
        !init_window(400, 400)
    fin

    methode vrai_y (y) fait 
        renvoie 400 - y - self.decaly;
    fin
    methode vrai_x (x) fait 
        renvoie x + self.decalx;
    fin

    methode trace (borne1, borne2) fait 
        ancien_x = borne1;
        ancien_y = !arrondis(!self.func(ancien_x));

        !set_color(0, 0, 0, 255)
        pour x allant de borne1 a borne2 fait 
            yp = !arrondis(!self.func(x));
            !draw_line(!self.vrai_x(ancien_x), !self.vrai_y(ancien_y), !self.vrai_x(x), !self.vrai_y(yp));
            ancien_x = x;
            ancien_y = yp;
        fin
    fin

    methode lance_trace() fait
        tache (!self.trace, -self.decalx, -49);
        tache (!self.trace, -50, 1);
        tache (!self.trace, 0, 51);
        tache (!self.trace, 50, 400);
    fin

    methode boucle (events) fait
        pour i allant de 0 a events.taille fait 
            event = events[i];
            si event.type == "KeyDown" alors
                si event == "Right" alors 
                    self.decalx = self.decalx - 10;
                sinonsi event == "Left" alors 
                    self.decalx = self.decalx + 10;
                sinonsi event == "Up" alors 
                    self.decaly = self.decaly - 10;
                sinonsi event == "Down" alors 
                    self.decaly = self.decaly + 10;
                fin
                self.non_tracee = 1;
            fin
        fin

        si self.non_tracee fait
            !set_color(255, 255, 255, 255)
            !clear()

            !set_color(100, 100, 100, 255)
            !draw_line(0, !self.vrai_y(0), 400, !self.vrai_y(0))
            !draw_line(!self.vrai_x(0), 0, !self.vrai_x(0), 400)

            !set_color(0, 0, 0, 255)
            pour x allant de 0 a 400 fait 
                si x % 10 == 0 alors
                    !draw_line(x, !self.vrai_y(0) - 2, x, !self.vrai_y(0) + 2)
                    !draw_line(!self.vrai_x(0) - 2, x, !self.vrai_x(0) + 2, x)
                fin
            fin
            
            !self.lance_trace()
            !render()
            self.non_tracee = 0;
        fin
        renvoie 1;
    fin
fin

fonction f (x) fait 
    renvoie float(1) / 100 * (x ^ 3);
fin

p = grapher(!f);

!mainloop(!p.boucle, p)