inclue "./lib/std.wati";


fonction dors (value) fait
    time0 = !temps();
    dernier_temp = 0;
    tant que (!temps() - time0 < value) fait
        f = !temps() - time0;
        si (f != dernier_temp) alors
            dernier_temp = f;
        fin
    fin
fin

classe game contient
    methode constructeur () fait
        self.map = list();

        self.direction = "d";

        pour y allant de 0 a 10 fait
            p = list();
            pour x allant de 0 a 10 fait 
                si !et(y == 5, x == 6) alors
                    !p.plus("#")
                sinon
                    !p.plus(".")
                fin
            fin
            !self.map.plus(p)
        fin 

        self.x = 6;
        self.y = 5;

        self.queueX = list();
        self.queueY = list();

        self.pommeX = 0;
        self.pommeY = 0;

        self.taille = 1;

        self.r = random();

        self.head = terminal_bold + terminal_red + "o" + terminal_reset;
        self.blank = ".";
        self.queue = "#";
        self.pomme = terminal_bold + terminal_green + "@" + terminal_reset;
        !self.ecrit(0, 0, self.pomme)

        self.run = "run";
    fin

    methode print () fait
        pour y allant de 0 a 10 fait
            p = self.map[y];
            pour x allant de 0 a 10 fait 
                !print(p[x], " ")
            fin
            !print("\n")
        fin
    fin

    methode ecrit (x, y, char) fait
        p = self.map[y];
        !p.modifie(x, char)
    fin

    methode avance_queue () fait
        !self.ecrit(self.x, self.y, self.queue)
        !self.queueX.debut(self.x)
        !self.queueY.debut(self.y)
        si self.taille == self.queueX.taille alors
            px = !self.queueX.pop(self.queueX.taille - 1);
            py = !self.queueY.pop(self.queueY.taille - 1);
            si !et(px == self.pommeX, py == self.pommeY) fait
                !self.ecrit(px, py, self.pomme)
            sinon
                !self.ecrit(px, py, self.blank)
            fin
        fin
    fin

    methode haut () fait
        !self.avance_queue()
        self.y = self.y - 1 % 10;
        si (self.y < 0) alors
            self.y = 10 + self.y;
        fin
        !self.ecrit(self.x, self.y, self.head)
    fin

    methode droite () fait
        !self.avance_queue()
        self.x = self.x + 1 % 10;
        !self.ecrit(self.x, self.y, self.head)
    fin

    methode gauche () fait
        !self.avance_queue()
        self.x = self.x - 1 % 10;
        si (self.x < 0) alors
            self.x = 10 + self.x;
        fin
        !self.ecrit(self.x, self.y, self.head)
    fin
    
    methode bas () fait
        !self.avance_queue()
        self.y = self.y + 1 % 10;
        !self.ecrit(self.x, self.y, self.head)
    fin

    methode check_collision () fait
        pour i allant de 0 a self.queueX.taille fait
            px = self.queueX[i];
            py = self.queueY[i];
            si !et(self.x == px, self.y == py) alors
                renvoie "collision";
            fin
        fin
        si !et(self.x == self.pommeX, self.y == self.pommeY) alors
            self.taille = self.taille + 1;
            !self.genere_pomme()
        fin
    fin

    methode genere_pomme () fait
        x = !self.r.rand(10);
        y = !self.r.rand(10);
        
        !self.ecrit(x, y, self.pomme)

        self.pommeX = x;
        self.pommeY = y;

    fin

    methode intro () fait
        !system("clear")
        !println("Commandes :")
        !println("z : haut")
        !println("s : bas")
        !println("d : droite")
        !println("q : gauche")
        !println("[espace] : pause")
        !println("\tn'importe que touche pour redémmarer")
        !input("")
        !system("clear")
    fin

    methode lors_entree () fait
        tant que self.run == "run" fait
            a = !input_caché("", "");
            self.direction = a;
        fin
    fin

    methode boucle () fait
        !system("stty -icanon")
        tant que self.run == "run" fait
            !self.print()
            !dors(1)

            si self.direction == "z" alors
                !self.haut()
            sinonsi self.direction == "s" alors
                !self.bas()
            sinonsi self.direction == "q" alors
                !self.gauche()
            sinonsi self.direction == " " alors
                !println("EN PAUSE")
                tant que self.direction == " " fait

                fin
            sinon 
                !self.droite()
            fin
            
            r = !self.check_collision();
            
            si r == "collision" alors
                self.run = "";
            fin
            !system("clear")
        fin
        !println("Perdu !")
    fin
fin

g = game();
!g.intro()
self = g;
tache !g.lors_entree;
!g.boucle()