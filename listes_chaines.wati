inclue "mallom.wati";

classe <type> noeud contient
    <type> contenu;
    <*noeud<type>> proch;

    methode <*noeud <type>> constructeur(<type> x) fait
        soit = <*noeud<type>>(!mallom(16));
        soit.contenu = x;
        soit.proch = soit;
        renvoie soit;
    fin

    methode <rien> pousse(<type> x) fait 
        si soit.proch == soit fait 
            soit.proch = <type>noeud(x);
        fin sinon fait 
            !soit.proch.pousse(x);
        fin
    fin

    methode <rien> print() fait 
        si soit.proch == soit fait 
            !print(soit.contenu);
        fin sinon fait 
            !print(soit.contenu)
            !print(", ");
            !soit.proch.print();
        fin
    fin
    
    methode <*noeud<type>> index(<ent> index) fait 
        si index == 0 fait
            renvoie soit;
        fin
        renvoie !soit.proch.index(index - 1);
    fin
    
    methode <type> pop(<ent> index) fait 
        si index == 1 fait
            p = soit.proch;
            c = p.contenu;
            si p.proch == p fait 
                soit.proch = soit;
            fin sinon fait 
                soit.proch = p.proch;
            fin
            !libere(<*rien>p);
            renvoie c;
        fin
        renvoie !soit.proch.pop(index - 1);
    fin
fin

classe <type> liste contient
    <*noeud<type>> debut;
    <ent> taille;
    <ent> dernier_index;
    <*noeud<type>> dernier_noeud;

    methode <*liste<type>> constructeur() fait 
        soit = <*liste<type>>!mallom(16);
        soit.debut = <type>noeud(<type>0);
        soit.taille = 0;
        renvoie soit;
    fin

    methode <rien> ajoute(<type> x) fait 
        soit.taille = soit.taille + 1;
        !soit.debut.pousse(x)
    fin

    methode <rien> print() fait 
        si soit.taille == 0 fait !print("[ ]"); renvoie; fin
        !print("[ ")
        !soit.debut.proch.print();
        !print(" ]")
    fin

    methode <rien> println() fait 
        !soit.print()
        !print('\n')
    fin
    
    methode <type> index (<ent> index) fait 
        si index >= soit.taille fait 
            !erreur("!liste.index : L'index est plus grand que la taille de la liste")
        fin
        si index >= soit.dernier_index fait 
            p = !soit.dernier_noeud.index(index - soit.dernier_index);
            dernier_index = index;
            dernier_noeud = p;
            renvoie p.contenu;
        fin
        <*noeud<type>> p = !soit.debut.index(index + 1);
        dernier_index = index;
        dernier_noeud = p;
        renvoie p.contenu;
    fin

    methode <type> pop (<ent> index) fait 
        si index >= soit.taille fait 
            !erreur("!liste.pop : L'index est plus grand que la taille de la liste")
        fin
        soit.taille = soit.taille - 1;
        renvoie !soit.debut.pop(index + 1);
    fin
fin

l = <ent>liste();
!l.ajoute(1);
!l.ajoute(2);
!l.ajoute(3);
!l.ajoute(4);
!println(!l.index(0))
!println(!l.index(1))
!println(!l.index(2))
!println(!l.index(0))
!println(!l.index(0))