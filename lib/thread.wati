PISCINE_THREAD = list();

classe future contient
    methode constructeur () fait
        self.est_finis = 0;
        self.resultat = 0;
        !PISCINE_THREAD.plus(self);
        self.id = PISCINE_THREAD.taille;
    fin

    methode destructeur () fait
        pour i dans [self.id, PISCINE_THREAD.taille] fait
            t = PISCINE_THREAD[i];
            t.id = t.id - 1;
        fin
        !PISCINE_THREAD.pop(self.id - 1)
    fin

    methode en_string () fait
        r = "<thread id=" + !char(self.id) + ">";
        renvoie r;
    fin

    methode join () fait
        tant que !pas(self.est_finis) fait continue; fin
        renvoie self;
    fin

    methode rec_resultat () fait
        si self.est_finis == 0 alors
            !erreur("future : la fonction n'as pas finis d'executer, et le thread n'as pas été joint")
        fin
        renvoie self.resultat;
    fin

    methode eq (x) fait
        si !type(x) != !type(self) alors
            renvoie 0;
        fin

        si self.id == eq.id alors
            renvoie 1;
        fin
        renvoie 0;
    fin
    
    methode ne (x) fait
        si !type(x) != !type(self) alors
            renvoie 1;
        fin

        si self.id == eq.id alors
            renvoie 0;
        fin
        renvoie 1;
    fin
fin

fonction thread (future, target) fait
    si (!type(future) != "future") alors
        !erreur("!thread : le type du premier argument doit être 'thread'")
    fin
    si (!type(target) != "fonction") alors
        !erreur("!thread : le type du deuxième arguement doit être 'fonction'")
    fin

    future.resultat = !target();

    future.est_finis = 1;
fin