// Par Anton Appel, le 17 nov 2023

// ATTENTION :  Les fonctions qui gèrent les itérables ne DOIVENT PAS contenir de boucle (et de boucle pour . dans . fait)
//              sinon, on risque des erreurs de récursion

fonction initialise_boucle(self) fait 
    "[INTERNE] Initialise pour une boucle 'pour . dans . fait'";
    // Fait les vérifications nécessaires à la manipulation de l'itérable

    si !pas(!est_objet(self)) || !pas(self.iterable) alors  // Si c'est un objet, itérable
        !erreur("Ne peux pas itérer dans autre chose qu'un itérable et '" + !type(self) + "' n'en est pas")
    sinonsi !pas(!methode_existe(self, "suivant")) alors
        !erreur("L'itérable '" + !type(self) + "' n'a pas de méthode '!.suivant', nécessaire à l'itération dans une boucle")
    sinonsi !pas(!methode_existe(self, "a_la_fin")) alors 
        !erreur("L'itérable '" + !type(self) + "' n'a pas de méthode '!.a_la_fin', nécessaire à l'itération dans une boucle")
    sinonsi !pas(!methode_existe(self, "debut")) alors 
        !erreur("L'itérable '" + !type(self) + "' n'a pas de méthode '!.debut', nécessaire à l'itération dans une boucle")
    fin
    
    // on initialise l'itérable au début, au cas où il ai déja été utilisé
    !self.debut();
fin

fonction termine_boucle (self) fait
    // On traite ici la résolution des conflits entre les boucles utilisant l'itérateur.
    si !pas(!methode_existe(self, "dernier_etat")) alors 
        !erreur("L'itérable '" + !type(self) + "' n'a pas de méthode '!.dernier_etat', nécessaire à la résolution de conflits")
    fin
    !self.dernier_etat();
fin