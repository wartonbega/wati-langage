
classe tableau contient
    methode constructeur () fait 
        self.taille = 0;
        self.puissance = 2;
        self.tab = !constructeur_tableau(); // Attention, tab n'est pas manipulable par le wati !
        self._iterable = 1;
        self.current = 0;
        self.conflits = 0; // On ne crée pas directement le tableau de conflits, sinon : récursion !
    fin

    methode destructeur () fait 
        pour i dans [0, self.taille] fait 
            libere self[0];
        fin
    fin

    methode plus (x) fait 
        !tableau_plus(self, x);
        self.taille = self.taille + 1;
        renvoie self;
    fin

    methode index (ind) fait 
        renvoie !tableau_index(self, ind);
    fin

    methode modifie(index, valeur) fait 
        !tableau_modifie(self, index, valeur);
        renvoie self;
    fin

    methode suivant() fait 
        c = self[self.current];
        self.current = self.current + 1;
        si self.current > self.taille alors
            !erreur("Le tableau ne peut pas itérer plus loin, on est déjà à la fin du tableau")
        fin
        renvoie c;
    fin

    methode a_la_fin() fait 
        renvoie self.current == self.taille;
    fin

    methode debut() fait 
        si self.conflits == 0 alors 
            self.conflits = tableau(); // on l'initialise maintenant.
        fin
        
        !self.conflits.plus(self.current);
        self.current = 0;
    fin

    methode dernier_etat() fait 
        si self.conflits.taille != 0 alors 
            self.current = !self.conflits.pop(self.conflits.taille - 1);
        sinon
            self.current = 0;
        fin
    fin

    methode pop (index) fait 
        r = !tableau_pop(self, index);
        self.taille = self.taille - 1;
        renvoie r;
    fin

    methode en_string() fait 
        si self.taille == 0 alors 
            renvoie "{}";
        fin
        r = "{";
        pour i dans [0, self.taille - 1] fait 
            q = self[i];
            si !type(q) == "char" alors 
                r = r + "\"" + !char(q) + "\", ";
            sinonsi !type(q) == "string" alors
                r = r + "\"" + !char(q) + "\"" + ", ";
            sinonsi self == q alors
                r = r + "{...}, ";
            sinon
                r = r + !char(q) + ", ";
            fin
        fin
        q = self[self.taille - 1];
        si !type(q) == "char" alors 
            r = r + "\"" + !char(q) + "\"}";
        sinonsi !type(q) == "string" alors
            r = r + "\"" + !char(q) + "\"}";
        sinonsi self == q alors
            r = r + "{...}}";
        sinon
            r = r + !char(q) + "}";
        fin
        renvoie r;
    fin

    methode equals (x) fait 
        si !type(x) != "tableau" alors 
            renvoie 0;
        fin
        r = !tab_comp_equal(self, x);
        renvoie r;
    fin

    methode ne (x) fait 
        renvoie !abs(!self.equals(x) - 1);
    fin

    methode envers () fait 
        T = tableau();
        pour i dans [1, self.taille + 1] fait 
            !T.plus(self[self.taille - i])
        fin
        renvoie T;
    fin
fin

fonction comparaison_iterative_tableau (self, x) fait 
    // On présume que les deux tableaux ont la même taille
    t = self.taille;
    t_a = x.taille;
    si t != t_a alors 
        renvoie 0;
    fin

    pour i dans [0, t] fait 
        si self[i] != x[i] alors 
            renvoie 0;
        fin
    fin
    renvoie 1;
fin