// Par Anton Appel
// La classe de node permettant la création des listes doublement chainées

classe node contient
    // Deux liens permettant la double chaine, prev et next.
    methode constructeur (content) fait
        // Prev et next sont des objets (attention lors de la libération)
        self.content = content;
        self.prev = 0;
        self.next = 0;
        self.type = !type(content);
    fin

    methode en_string() fait
        // Renvoie la description du node
        // exemple : <node : 3> si 'content = 3'
        renvoie "<node : " + !char(self.content) + ">";
    fin

    methode equals (autre) fait
        "Support de la syntaxe 'node == node'"
        renvoie self.content == autre.content;
    fin

    methode ne (autre) fait
        "Support de la syntaxe 'node != node'"
        renvoie self.content != autre.content;
    fin

    methode chaine (n, max) fait 
        "Itère n fois jusqu'au maillon désiré. Nombres négatifs pour accèder aux chaînons précédents"

        // Algorithme recusrif, non optimisé avec le langage
        // Une méthode plus rapide et moins memory consuming seraît de le faire itérativement
        // avec une boucle pour (et dans ce cas en dehors d'une méthode)
        si n < max fait
            renvoie !self.next.chaine(n + 1, max);
        sinonsi n == max fait
            renvoie self;
        sinon
            renvoie !self.prev.chaine(n - 1, max);
        fin
        // Tous les cas sont traités avec le sinon
    fin
fin
