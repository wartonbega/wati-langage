// Anton Appel le 13 août 2023
// La classe de string en wati a une utilité limitée par rapport aux chars.
// Outre le fait que l'accession aux différents caractères est plus simple,
// et que certaines méthodes ont été simplifiés, les strings n'ont pas d'autre
// utilité que de ralentire déséspérément le programme.
//
// Les strings sont des itérables, avec une taille qui augmente au fur a mesure
// que des éléments sont rajoutés

classe string contient
    methode constructeur (char) fait
        self.content = tableau();
        self.taille = 0;
        self._iterable = 1;
        si !type(char) == "char" alors
            pour i dans [0, !c_len(char)] fait
                self.content = self.content + char[i];
            fin
            self.taille = !c_len(char);
        fin
        si !type(char) == "string" alors
            pour i dans [0, char.taille] alors
                self.content = self.content + char[i];
            fin
            self.taille = char.taille;
        fin
    fin

    methode en_string () fait
        total = "";
        pour i dans [0, self.taille] fait
            total = total + !self.content[i];
        fin
        renvoie total;
    fin

    methode plus (char) fait
        si !type(char) == "char" alors
            si !c_len(char) != 0 alors
                pour i dans [0, !c_len(char)] fait
                    self.content = self.content + !c_en(char, i);
                    self.taille = self.taille + 1;
                fin
            fin
            renvoie self;
        fin
        si !type(char) == "string" alors
            pour i dans [0, char.taille] alors
                self.content = self.content + !char[i];
                self.taille = self.taille + 1;
            fin 
            renvoie self;
        fin
        !erreur("type 'string' ne peut pas supporter l'opération '+' avec le type " + !type(char))
        renvoie self;
    fin

    methode index (int) fait
        si !type(int) != "int" alors
            !erreur("le type 'list' n'accepte d'indexation que avec le type 'int', pas '"+!type(int)+"'")
        fin
        renvoie !self.content[int];
    fin

    methode pop (int) fait
        c = !self.content.pop(int);
        self.taille = self.taille - 1;
        renvoie c;
    fin

    methode modifie (index, char) fait 
        si !type(char) != "char" || !c_len(char) != 1 alors 
            !erreur("!string.modifie : le type de la valeur doit être de type 'char' et de longueur 1")
        fin
        si index >= self.taille fait 
            !erreur("!string.modifie : l'index demandé est plus grand que la taille du string")
        fin
        !self.content.modifie(index, char)
        renvoie self;
    fin

    methode times (int) fait
        si !type(int) != "int" alors
            !erreur("type 'string' ne peut pas supporter l'opération '*' avec le type " + !type(int))
        fin

        si int < 0 alors
            !erreur("la valeur de 'times' doit être positive")
        fin

        bis = string("");
        
        pour i dans [0, int] fait
            bis = bis + self;
        fin
        
        self.content = bis.content;
        renvoie bis;
    fin

    methode argument (func) fait 
        si func == !self.constructeur || func == !type || func == !print || func == !println alors 
            renvoie self;
        fin
        renvoie string(self);
    fin

    methode copie () fait 
        renvoie string(self);
    fin

    methode split (char) fait 
        "Sépare le texte par l'arguement spécifié (1 caractère de long). Renvoie un tableau";
        si !c_len(char) != 1 fait 
            !erreur("La taille du caractère de séparation doit être de 1");
        fin
        total = tableau();
        patient = string("");
        pour i dans [0, self.taille] fait 
            q = self.content[i];
            si q == char alors 
                !total.plus(patient);
                patient = string("");
            sinon 
                patient = patient + q;
            fin
        fin
        si patient != "" alors 
            !total.plus(patient)
        fin
        renvoie total;
    fin

    methode remplace (anc, nouv) fait 
        "Remplace toutes les occurences de 'anc' par 'nouv'";
        si !type(anc) != "char" || !c_len(anc) != 1 || !type(nouv) != "char" || !c_len(nouv) != 1 alors 
            !erreur("!string.remplace : le type des valeurs doivent être de type 'char' et de longueur 1")
        fin

        pour i dans [0, self.taille] fait 
            si !self.content.index(i) == anc alors 
                !self.content.modifie(i, nouv)
            fin
        fin
        renvoie self;
    fin

    methode ne (x) fait 
        renvoie !abs(!self.equals(x) - 1);
    fin

    methode equals (x) fait 
        t = !type(x);
        si t == "string" alors
            renvoie self.content == x.content;
        sinonsi t == "char" alors 
            si !c_len(x) != self.taille alors
                renvoie 0;
            fin
            
            pour i dans [0, self.taille] fait 
                si !self.index(i) != x[i] alors 
                    renvoie 0;
                fin
            fin
            renvoie 1;
        fin
        renvoie 0;
    fin

    methode est_nombre() fait 
        "Renvoie '1' si la chaîne de caractère est uniquement constituée de nombres. '0' sinon";
        pour i dans [0, self.taille] fait 
            q = self.content[i];
            si q != "0" && q != "1" && q != "2" && q != "3" && q != "4" && q != "5" && q != "6" && q != "7" && q != "8" && q != "9" alors 
                renvoie 0;
            fin
        fin
        renvoie 1;
    fin

    methode en_int() fait 
        "Convertis le nombre contenu dans le string en entier";
        // convertis le nombre en entier
        n = 0;
        pour i dans [0, self.taille] fait 
            n = n*10 + !int(self.content[i]);
        fin
        renvoie n;
    fin
fin

fonction "char.index"(int) fait
    renvoie !c_en(self, int);
fin

fonction int(c) fait 
    si c == "1" fait 
        renvoie 1;
    sinonsi c == "2" fait 
        renvoie 2;
    sinonsi c == "3" fait 
        renvoie 3;
    sinonsi c == "4" fait 
        renvoie 4;
    sinonsi c == "5" fait 
        renvoie 5;
    sinonsi c == "6" fait 
        renvoie 6;
    sinonsi c == "7" fait 
        renvoie 7;
    sinonsi c == "8" fait 
        renvoie 8;
    sinonsi c == "9" fait 
        renvoie 9;
    sinon 
        renvoie 0;
    fin
fin

fonction en_int(c) fait 
    "Transforme un 'char' en 'int'"
    // Peut accpeter un tracker
    nb = c;
    si !type(c) == "traqueur" fait
        nb = *c;
    fin
    n = 0;
    q = !c_len(nb);
    s = 0;

    si nb[0] == "-" alors 
        s = 1;
    fin
    
    pour i dans [s, q] fait 
        n = n*10 + !int(nb[i]);
    fin
    
    si s alors 
        n = -n;
    fin
    
    si !type(c) == "traqueur" fait 
        *c = n;
    fin
    renvoie n;
fin