inclue "node.wati";

classe list contient 
    methode constructeur () fait
        self.head = node("debut-de-liste");
        self.tail = node("fin-de-liste");
        self.head.next = self.tail;
        self.tail.prev = self.head;

        self.taille = 0;
    fin

    methode plus(content) fait
        n = node(content);
        n.next = self.tail;
        
        prev = self.tail.prev;
        n.prev = prev;
        prev.next = n;
        self.tail.prev = n;
        
        self.taille = self.taille + 1;
        renvoie self;
    fin

    methode debut(content) fait
        n = node(content);

        r = self.head.next;
        r.prev = n;
        n.next = r;
        self.head.next = n;
        n.prev = self.head;
        self.taille = self.taille + 1;
        renvoie self;
    fin
    
    methode modifie (index, content) fait
        i = 0;
        n = self.head.next;
        tant que (i != index) fait
            n = n.next;
            i = i + 1;
        fin
        n.content = content;
    fin

    methode en_string() fait
        si self.taille == 0 alors
            renvoie "[ ]";
        fin

        r = "[ ";
        n = self.head.next;

        tant que (n.next.content != self.tail.content) fait
            si !type(n.content) == "char" alors
                r = r + "'" + n.content + "'" + ", ";
            sinon
                r = r + !char(n.content) + ", ";
            fin
            n = n.next;
        fin
        
        si !type(n.content) == "char" alors
            r = r + "'" + n.content + "' ]";
        sinon
            r = r + !char(n.content) + " ]";
        fin
        
        renvoie r;
    fin

    methode en (x) fait
        si (!type(x) != "int") alors
            !erreur("list : le type 'list' n'accepte d'indexation que avec le type 'int', pas '"+!type(x)+"'")
        fin
        
        si (x >= self.taille) fait
            !erreur("list : l'index est plus grand que la taille de la liste");
        fin

        i = 0;
        n = self.head.next;
        tant que i != x fait
            n = n.next;
            i = i + 1;
        fin
        renvoie n.content;
    fin

    methode index (x) fait
        renvoie !self.en(x);
    fin
    
    methode pop (x) fait
        i = 0;
        si (self.taille <= 0) alors
            !erreur("list : ne peut pas pop depuis une liste vide")
        fin

        si (x >= self.taille) alors
            !erreur("list : l'index est plus grand que la taille de la liste")
        fin

        n = self.head.next;
        tant que i != x fait
            n = n.next;
            i = i + 1;
        fin
        p = n.prev;
        next = n.next;
        p.next = next;
        next.prev = p;
        self.taille = self.taille - 1;
        u = n.content;
        libere n;
        renvoie u;
    fin


    methode envers () fait
        l = list();
        pour i allant de 0 a self.taille fait
            !l.debut(!self.en(i))
        fin
        renvoie l;
    fin

    methode destructeur () fait
        to_d = self.head.next;
        si (to_d.content == "fin-de-liste") fait
            libere self.head;
            libere self.tail;
            renvoie;
        fin
        tant que to_d.next.content != self.tail.content fait
            p = to_d;
            to_d = to_d.next;
            libere p;
        fin
        libere self.head;
    fin

    methode ne (x) fait
        si !type(x) != "list" alors
            renvoie 1;
        fin
    fin

    methode eq (x) fait
        si !type(x) != "list" alors
            renvoie 0;
        fin
    fin
fin