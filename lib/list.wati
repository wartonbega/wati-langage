// Anton Appel le 15 avril 2023
// Un liste en wati est doublement chainée
// algorithme : par méthode directe, c'est-à-dire que on part du début pour arriver à l'index demandé
// 
// La taille de la liste n'est pas recomptée à chaques demande de la taille, 
// mais elle est gardée comme attribut et incrémentée/décrémentée à chaques modification.
// Cela implique que des modifications 'manuelles' par l'utilisateur peuvent empêcher le bon fonctionnement de cette liste

inclue "node.wati";

classe list contient 
    // Une liste doublement chaînée
    // Contient des éléments de type non spécifié

    methode constructeur () fait
        self.head = node("debut-de-liste"); 
        self.tail = node("fin-de-liste");
        self.head.next = self.tail;
        self.tail.prev = self.head;

        self.current = self.head;

        self.taille = 0; // La taille qui vas être incrémentée
        self.conflits = 0; // Le tableau n'est pas initialisé ici
        self._iterable = 1;
    fin

    methode plus(content) fait
        "Ajoute une élément à la fin de liste";
        // On fabrique un nouveau noeud à partir de content
        n = node(content);

        // L'élément d'après est la fin de la liste tandisque 
        n.next = self.tail;
        
        // l'élément d'avant est celui qui précédais la liste
        prev = self.tail.prev;
        n.prev = prev;
        

        // On modifie finalement les elements avant et après pour 
        // compléter le double chaînage
        prev.next = n;
        self.tail.prev = n;
        
        // Incrémente la taille pour ne pas à avoir à la recalcuer systématiquement
        self.taille = self.taille + 1;

        renvoie self;
    fin

    methode accede (index) fait
        "On accède à un élément de la liste (donné par index)" ;
        // Algorithme basique, itératif et sans optimisation de l'algorithme
        m = self.head;
        pour i dans [0, index + 1] fait
            m = m.next;
        fin
        renvoie m;
    fin

    methode modifie (index, content) fait
        "Modifie le contenue de l'élément à l'endroit demandé. Compatible avec la syntaxe 'list[index] = content'";
        si index > self.taille fait 
            !erreur("L'index demandée est plus grande que la taille de la liste")
        fin
        n = !self.accede(index);
        n.content = content;
    fin

    methode en_string() fait
        "Renvoie la liste sous forme de chaîne de caractère : [e1, e2, ..., en]";
        si self.taille == 0 alors
            renvoie "[]";
        fin

        r = "[";
        n = self.head.next;
        tant que self.tail.content != n.next.content fait
            si !type(n.content) == "char" alors
                r = r + "\"" + n.content + "\"" + ", ";
            sinonsi !type(n.content) == "string" alors
                r = r + "\"" + !char(n.content) + "\"" + ", ";
            sinonsi n.content == self alors 
                r = r + "[...], ";
            sinon
                r = r + !char(n.content) + ", ";
            fin
            n = n.next;
        fin
        
        si !type(n.content) == "char" alors
            r = r + "\"" + n.content + "\"]";
        sinonsi !type(n.content) == "string" alors
            r = r + "\"" + !char(n.content) + "\"" + "]";
        sinonsi n.content == self alors 
            r = r + "[...]]";
        sinon
            r = r + !char(n.content) + "]";
        fin
        
        renvoie r;
    fin

    methode en (x) fait
        "Methode pour la syntaxe : 'liste[index]'";
        si !type(x) != "int" alors
            !erreur("list : le type 'list' n'accepte d'indexation que avec le type 'int', pas '"+!type(x)+"'")
        fin
        
        si (x >= self.taille) fait
            !erreur("list : l'index est plus grand que la taille de la liste");
        fin
        // La méthode utilisé pour acceder au noeud requis est celle qui a été spécifé
        renvoie (!self.accede(x)).content;
    fin

    methode debut() fait 
        "Met l'itérateur sur le premier élément";
        si self.conflits == 0 alors 
            self.conflits = tableau();
        fin
        !self.conflits.plus(self.current);
        self.current = self.head;
    fin

    methode a_la_fin() fait 
        "Renvoie 1 si l'itérateur est sur le dernier élément";
        renvoie self.current.next == self.tail;
    fin

    methode suivant () fait
        self.current = self.current.next;
        si self.current == self.tail alors 
            !erreur("On est déjà arrivé à la fin de la liste")
        fin
        renvoie self.current.content;
    fin

    methode dernier_etat() fait 
        si self.conflits.taille != 0 alors 
            self.current = !self.conflits.pop(self.conflits.taille - 1);
        sinon
            self.current = self.head;
        fin
    fin

    methode index (x) fait
        renvoie !self.en(x);
    fin
    
    methode pop (x) fait
        "Enlève le n-ième élément de la liste et le renvoie";

        si (self.taille <= 0) alors
            !erreur("list : ne peut pas pop depuis une liste vide")
        fin

        si (x >= self.taille) alors
            !erreur("list : l'index est plus grand que la taille de la liste")
        fin

        // On accede a l'element demandé avec la méthode spécifé
        n = !self.en(x);

        // On raccorde les différents noeuds
        p = n.prev;
        next = n.next;
        p.next = next;
        next.prev = p;
        self.taille = self.taille - 1;
        u = n.content;
        renvoie u;
    fin

    methode ne (x) fait
        "Support de la syntaxe 'list != list'";
        // On utilise juste la syntaxe prédéfinie dans equals
        renvoie !abs(!self.equals(x) - 1);
    fin

    methode equals (x) fait
        "Support de la syntaxe 'list == list'";

        // La fonction de comparaison est écrite en c++
        // dans le fichier 'list.cpp'
        si !type(x) != "list" fait 
            renvoie 0;
        fin
        renvoie !list_comp_equal(self, x);
    fin
fin

fonction comparaison_iterative(self, x) fait 
    // Compare les elements de deux liste de manière itérative
    // Fonction qui fait le lien avec du code c++
    m = self.head;
    n = x.head;
    pour i dans [0, self.taille] fait
        m = m.next;
        n = n.next;
        si m.content != n.content alors 
            renvoie 0;
        fin
    fin
    renvoie 1;
fin