// Par Anton Appel le 17 nov. 2023
// Un simple itérable qui permet de gérer des boucles

classe plage contient
    methode constructeur (borne1, borne2) fait 
        si !type(borne1) != "int" || !type(borne2) != "int" alors
            !erreur("plage : nécessite deux bornes de type 'int', pas '" + !type(borne1) + "' et '" + !type(borne2) + "'")
        fin

        self.pas = 1;
        self.current = borne1;
        self.borne1 = borne1;
        self.borne2 = borne2;
        self.taille = borne2 - borne1;

        si borne1 > borne2 alors 
            self.pas = -1;
            self.borne1 = borne1;
            self.borne2 = borne2;
            self.current = borne1;
            self.taille = borne1 - borne2;
        fin
        self._iterable = 1;
        self.conflits = tableau();
    fin

    methode debut () fait 
        !self.conflits.plus(self.current);
        self.current = self.borne1;
    fin

    methode suivant () fait 
        si self.current == self.borne2 alors
            !erreur("plage : ne peut pas plus itérer, est déjà arrivé à la fin")
        fin
        self.current = self.current + self.pas;
        renvoie self.current - self.pas;
    fin

    methode a_la_fin () fait 
        renvoie self.current == self.borne2;
    fin

    methode dernier_etat() fait 
        si self.conflits.taille != 0 alors 
            self.current = !self.conflits.pop(self.conflits.taille - 1);
        sinon
            self.current = self.borne1;
        fin
    fin

    methode en_string () fait
        renvoie "<plage [" + !char(self.borne1) + ", " + !char(self.borne2) + "] -> " + !char(self.current) + " >";
    fin


fin