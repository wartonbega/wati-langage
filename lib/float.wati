inclue "std.wati";

fonction puissance_de_dix (int) fait
    si (int > 0) alors
        pd = 0;
        tant que (10 ^ pd <= int) fait
            pd = pd + 1;
        fin
        renvoie pd - 1;
    fin
    si (int < 0) alors
        int = int * (0-1);
        pd = 0;
        tant que (10 ^ pd <= int) fait
            pd = pd + 1;
        fin
        renvoie pd - 1;
    fin
    si (int = 0) alors
        renvoie 0;
    fin
fin

fonction plus_grand (a, b) fait
    si (a > b) fait
        renvoie a;
    fin
    renvoie b;
fin

fonction plus_petit (a, b) fait
    si (a < b) fait
        renvoie a;
    fin
    renvoie b;
fin

fonction arrondis_puissance (a) fait
    p = a;
    t_p = !puissance_de_dix(a);
    tant que (p / 10 * (10 ^ (t_p - !puissance_de_dix(p) + 1)) == a) fait
        p = p / 10;
    fin
    renvoie p;
fin

classe float contient
    methode constructeur (int) fait
        self.content = int;
        self.ten_pow = 0;
    fin

    methode en_string () fait
        p = self.content;
        corps = "";

        si (self.content < 0) fait
            p = 0 - self.content;
        fin
        
        i = 0;
        si (!et(self.ten_pow == 0, self.content == 0)) alors
            renvoie "0";
        fin
        si (self.ten_pow >= 0) alors
            tant que (p > 0) fait
                corps = !char(p % 10) + corps;
                p = p / 10;
                i = i + 1;
            fin
            si (self.ten_pow != 0) alors
                corps = corps + "e" + !char(self.ten_pow);
            fin
        fin

        si (self.ten_pow < 0) alors
            tant que (p > 0) fait
                corps = !char(p % 10) + corps;
                p = p / 10;
                i = i + 1;
                si (i == (0-self.ten_pow)) alors
                    corps = "." + corps;
                fin
            fin
            si (i < (0-self.ten_pow)) alors
                tant que (i < (0-self.ten_pow)) fait
                    corps = "0" + corps;
                    i = i + 1;
                fin
                corps = "0." + corps;
            fin
        fin

        si (self.content < 0) fait
            corps = "-" + corps;
        fin
        renvoie corps;
    fin

    methode times (num) fait
        si (!type(num) == "float") alors
            self.content = self.content * num.content;
            self.ten_pow = self.ten_pow + num.ten_pow;
        fin
        si (!type(num) == "int") alors
            f = float(num);
            self = self * f;
            libere f;
        fin
        renvoie self;
    fin

    methode div (num) fait
        si (!type(num) == "float") alors
            m = self.content * 100000;
            self.content = m / num.content;
            self.ten_pow = self.ten_pow - 5 - num.ten_pow;
            !self.arrondis_puissance();
        fin

        si (!type(num) == "int") alors
            f = float(num);
            self = self / f;
            libere f;
        fin
        renvoie self;
    fin

    methode plus (num) fait
        si (!type(num) == "float") alors
            si (!et(self.ten_pow >= 0, num.ten_pow >= 0)) fait
                n = self.content * (10 ^ self.ten_pow);
                m = num.content * (10 ^ num.ten_pow);
                self.ten_pow = 0;
                self.content = n + m;
                !self.arrondis_puissance()
                renvoie self;
            fin

            p_g = !plus_grand(self.ten_pow, num.ten_pow);
            si (p_g == self.ten_pow) alors
                diff = self.ten_pow - num.ten_pow;
                n = self.content * (10 ^ diff);
                m = num.content;
                self.content = n + m;
                self.ten_pow = num.ten_pow;
            fin
            si (p_g == num.ten_pow) alors
                diff = num.ten_pow - self.ten_pow;
                n = num.content * (10 ^ diff);
                m = self.content;
                self.content = n + m;
            fin
        fin
        si (!type(num) == "int") alors
            f = float(num);
            self = self + f;
            libere f;
        fin
        renvoie self;
    fin
    
    methode minus (num) fait
        si (!type(num) == "float") alors
            si (!et(self.ten_pow >= 0, num.ten_pow >= 0)) fait
                n = self.content * (10 ^ self.ten_pow);
                m = num.content * (10 ^ num.ten_pow);
                self.ten_pow = 0;
                self.content = n - m;
                !self.arrondis_puissance()
                renvoie self;
            fin

            p_g = !plus_grand(self.ten_pow, num.ten_pow);
            si (p_g == self.ten_pow) alors
                diff = self.ten_pow - num.ten_pow;
                n = self.content * (10 ^ diff);
                m = num.content;
                self.content = n - m;
                self.ten_pow = num.ten_pow;
            fin
            si (p_g == num.ten_pow) alors
                diff = num.ten_pow - self.ten_pow;
                n = num.content * (10 ^ diff);
                m = self.content;
                self.content = n - m;
            fin
        fin
        si (!type(num) == "int") alors
            f = float(num);
            self = self - f;
            libere f;
        fin
        renvoie self;
    fin


    methode mod (num) fait
        si (!type(num) == "float") alors
            si self.ten_pow == num.ten_pow alors 
                self.content = self.content % num.content;
            fin
            si self.ten_pow < num.ten_pow alors
                diff = num.ten_pow - self.ten_pow;
                n = num.content * (10 ^ diff);
                m = self.content;
                self.content = m % n;
            fin
            si self.ten_pow > num.ten_pow alors
                diff = self.ten_pow - num.ten_pow;
                m = self.content * (10 ^ diff);
                n = num.content;
                self.content = m % n;
            fin
        fin

        si (!type(num) == "int") alors
            f = float(num);
            self = self % f;
            libere f;
        fin
        renvoie self;
    fin

    methode power (num) fait
        si (!type(num) != "int") alors
            !erreur("type 'float' ne peut pas supporter l'op√©ration '^' avec le type " + !type(num))
        fin
        si (!type(num) == "int") alors
            self.content = self.content ^ num;
            self.ten_pow = self.ten_pow * num;
        fin
        renvoie self;
    fin

    methode equals (num) fait
        si (!type(num) == "float") alors
            si self.ten_pow == num.ten_pow alors 
                renvoie self.content == num.content;
            fin
            si self.ten_pow < num.ten_pow alors
                diff = num.ten_pow - self.ten_pow;
                n = num.content * (10 ^ diff);
                m = self.content;
                renvoie n == m;
            fin
            si self.ten_pow > num.ten_pow alors
                diff = self.ten_pow - num.ten_pow;
                n = self.content * (10 ^ diff);
                m = num.content;
                renvoie n == m;
            fin
        fin

        si (!type(num) == "int") alors
            f = float(num);
            r = self == f;
            libere f;
            return r;
        fin
        renvoie 0;
    fin

    methode lt (num) fait
        si (!type(num) == "float") alors
            si self.ten_pow == num.ten_pow alors 
                renvoie self.content < num.content;
            fin
            si self.ten_pow < num.ten_pow alors
                diff = num.ten_pow - self.ten_pow;
                n = num.content * (10 ^ diff);
                m = self.content;
                renvoie n > m;
            fin
            si self.ten_pow > num.ten_pow alors
                diff = self.ten_pow - num.ten_pow;
                n = self.content * (10 ^ diff);
                m = num.content;
                renvoie n < m;
            fin
        fin

        si (!type(num) == "int") alors
            f = float(num);
            r = self < f;
            libere f;
            renvoie r;
        fin
        renvoie 0;
    fin

    methode gt (num) fait
        si (!type(num) == "float") alors
            si self.ten_pow == num.ten_pow alors 
                renvoie self.content > num.content;
            fin
            si self.ten_pow < num.ten_pow alors
                diff = num.ten_pow - self.ten_pow;
                n = num.content * (10 ^ diff);
                m = self.content;
                renvoie n < m;
            fin
            si self.ten_pow > num.ten_pow alors
                diff = self.ten_pow - num.ten_pow;
                n = self.content * (10 ^ diff);
                m = num.content;
                renvoie n > m;
            fin
        fin

        si (!type(num) == "int") alors
            f = float(num);
            r = self > f;
            libere f;
            renvoie r;
        fin
        renvoie 0;
    fin

    methode le (num) fait
        renvoie !ou(!self.lt(num), !self.equals(num));
    fin

    methode ge (num) fait
        renvoie !ou(!self.gt(num), !self.equals(num));
    fin

    methode ne (num) fait
        renvoie !pas(!self.equals(num));
    fin

    methode to_int (num) fait
        renvoie self.content * (10^self.ten_pow);
    fin

    methode arrondis_puissance () fait
        r = self.content;
        p_t = !puissance_de_dix(!arrondis_puissance(r));
        p = !puissance_de_dix(r) - p_t;
        r = r / (10 ^ p);
        self.ten_pow = self.ten_pow + p;
        self.content = r;
        renvoie self;
    fin
fin

f = float(100) + (float(2)/100) % (float(1) / 10);
!println(f)

l = list();
!l.plus("hello");
!l.plus("world");
!l.plus("and");
!l.plus("everyone");
!print( l[1] )