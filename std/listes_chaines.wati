inclue "mallom.wati";

classe <type> noeud contient
    <type> contenu;
    <*noeud<type>> proch;

    methode <*noeud <type>> constructeur(<*noeud <type>> soit, <type> x) fait
        soit = <*noeud<type>>(!mallom(16));
        soit.contenu = x;
        soit.proch = soit;
        renvoie soit;
    fin

    methode <rien> pousse(<*noeud <type>> soit, <type> x) fait 
        si soit.proch == soit fait 
            soit.proch = <type>noeud(x);
        fin sinon fait 
            !soit.proch.pousse(x);
        fin
    fin

    methode <rien> print(<*noeud <type>> soit) fait 
        si soit.proch == soit fait 
            !print(soit.contenu);
        fin sinon fait 
            !print(soit.contenu);
            !print(", ");
            !soit.proch.print();
        fin
    fin
    
    methode <*noeud<type>> index(<*noeud <type>> soit, <ent> index) fait 
        si index == 0 fait
            renvoie soit;
        fin
        renvoie !soit.proch.index(index - 1);
    fin
    
    methode <type> pop(<*noeud <type>> soit, <ent> index) fait 
        si index == 1 fait
            p = soit.proch;
            c = p.contenu;
            si p.proch == p fait 
                soit.proch = soit;
            fin sinon fait 
                soit.proch = p.proch;
            fin
            !libere(<*rien>p);
            renvoie c;
        fin
        renvoie !soit.proch.pop(index - 1);
    fin
fin

classe <type> liste IT contient
    <*noeud<type>> debut;
    <ent> taille        ;
    <ent> dernier_index;
    <*noeud<type>> dernier_noeud;
    <*noeud<type>> iter;

    methode <*liste<type>> constructeur(<*liste<type>> soit) fait 
        soit = <*liste<type>>!mallom(40);
        soit.debut = <type>noeud(<type>0);
        soit.dernier_noeud = soit.debut;
        soit.taille = 0;
        renvoie soit;
    fin

    methode <rien> ajoute(<*liste<type>> soit, <type> x) fait 
        soit.taille = soit.taille + 1;
        !soit.debut.pousse(x);
    fin

    methode <rien> print(<*liste<type>> soit) fait 
        si soit.taille == 0 fait !print("[ ]"); renvoie; fin
        !print("[ ");
        !soit.debut.proch.print();
        !print(" ]");
    fin

    methode <rien> println(<*liste<type>> soit) fait 
        !soit.print();
        !print('\n');
    fin
    
    methode <type> index (<*liste<type>> soit, <ent> index) fait 
        si index >= soit.taille fait 
            !erreur("!liste.index : L'index est plus grand que la taille de la liste");
        fin
        si index >= soit.dernier_index fait 
            p = !soit.dernier_noeud.index(index - soit.dernier_index);
            dernier_index = index;
            dernier_noeud = p;
            renvoie p.contenu;
        fin
        <*noeud<type>> p = !soit.debut.index(index + 1);
        dernier_index = index;
        dernier_noeud = p;
        renvoie p.contenu;
    fin

    methode <rien> assigne_index(<*liste<type>> soit, <ent> index, <type> x) fait 
        si index >= soit.taille fait 
            !erreur("!liste.assigne_index : L'index est plus grand que la taille de la liste");
        fin
        si index >= soit.dernier_index fait 
            p = !soit.dernier_noeud.index(index - soit.dernier_index);
            p.contenu = x; // On assigne la valeur
            dernier_index = index;
            dernier_noeud = p;
        fin
        <*noeud<type>> p = !soit.debut.index(index + 1);
        p.contenu = x; // On assigne la valeur
        dernier_index = index;
        dernier_noeud = p;
    fin

    methode <type> pop (<*liste<type>> soit, <ent> index) fait 
        si index >= soit.taille fait 
            !erreur("!liste.pop : L'index est plus grand que la taille de la liste");
        fin
        soit.taille = soit.taille - 1;
        renvoie !soit.debut.pop(index + 1);
    fin

    methode <rien> debut (<*liste<type>> soit) fait 
        soit.iter = soit.debut;
    fin

    methode <type> suivant (<*liste<type>> soit) fait 
        soit.iter = soit.iter.proch;
        renvoie soit.iter.contenu;
    fin

    methode <bool> fin (<*liste<type>> soit) fait
        renvoie soit.iter.proch == soit.iter || soit.iter == 0;
    fin
fin

utilise <ent>liste;
utilise <chr>liste;