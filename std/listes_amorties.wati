inclue "mallom.watiH";
inclue "io.watiH";
inclue "listes.watiH";

classe <Type> dliste IT contient
    <ent> taille;
    <ent> max;
    <[_]Type> mem;
    <ent> courant;

    methode <*dliste<Type>> constructeur (<*dliste<Type>> soit) fait 
        soit = <*dliste<Type>>!mallom(!taillede(<dliste<Type>>));
        soit.taille = 0;
        soit.max = 8;
        soit.mem = <[_]Type>!mallom(!taillede(<Type>) * soit.max);
        soit.courant = 0;
        renvoie soit;
    fin

    methode <rien> remaniement (<*dliste<Type>> soit, <ent> max) fait 
        soit.max = max;
        <[_]Type> nouv = <[_]Type> !mallom(!taillede(<Type>) * (soit.max + 1)); // on prend un de plus pour éviter les débordement de mémoire
        pour i dans [0, soit.taille] fait 
            nouv[i] = soit.mem[i];
            soit.mem[i] = <Type>0;
        fin
        !libere(<*rien>soit.mem);
        soit.mem = nouv;
    fin

    methode <rien> ajoute(<*dliste<Type>> soit, <Type> x) fait
        si soit.taille + 1 == soit.max fait 
            !soit.remaniement(soit.max * 2);
        fin
        soit.mem[soit.taille] = x;
        soit.taille = soit.taille + 1;
    fin

    methode <Type> pop (<*dliste<Type>> soit, <ent> index) fait 
        si index >= soit.taille fait 
            !erreur("!dliste.pop : L'index est plus grand que la taille de la liste");
        fin
        r = soit.mem[index];
        pour i dans [index, soit.taille - 1] fait 
            soit.mem[i] = soit.mem[i + 1];
        fin
        soit.mem[soit.taille] = <Type>0; // On détruit la valeur finale pour plus de sécurité
        soit.taille = soit.taille - 1;
        si soit.taille <= soit.max/2 && soit.max > 8 fait 
            !soit.remaniement(soit.max/2);
        fin
        renvoie r;
    fin

    methode <Type> index (<*dliste<Type>> soit, <ent> index) fait
        si index < 0 fait
            index = soit.taille + index;
            si index < 0 fait
                !erreur("!dliste.index : L'index est plus grand que la taille de la liste");
            fin
        fin
        si index >= soit.taille fait 
            !erreur("!dliste.index : L'index est plus grand que la taille de la liste");
        fin
        renvoie soit.mem[index];
    fin

    methode <rien> assigne_index(<*dliste<Type>> soit, <ent> index, <Type> x) fait 
        si index >= soit.taille fait 
            !erreur("!dliste.assigne_index : L'index est plus grand que la taille de la liste");
        fin
        soit.mem[index] = x;
    fin

    methode <rien> println(<*dliste<Type>> soit) fait 
        !print('[');!print(' ');
        pour i dans [0, soit.taille] fait
            si !methode_existe(soit.mem[i], "print") fait
                e = soit.mem[i];
                !e.print();
            fin sinon fait
                !print(!hex(<ent>(soit.mem[i])));
            fin
            !print(' ');
        fin
        !println(']');
    fin

    methode <rien> debut(<*dliste<Type>> soit) fait 
        soit.courant = 0;
    fin

    methode <Type> suivant (<*dliste<Type>> soit) fait 
        r = soit.courant;
        soit.courant = soit.courant + 1;
        renvoie soit.mem[r];
    fin

    methode <bool> fin (<*dliste<Type>> soit) fait 
        renvoie soit.taille == soit.courant;
    fin
fin