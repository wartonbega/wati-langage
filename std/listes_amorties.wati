inclue "mallom.watiH";
inclue "io.watiH";
inclue "listes.watiH";

classe <Type> dliste IT contient
    <ent> taille;
    <ent> max;
    <[_]Type> mem;

    utilise <Type>dliste_it;

    methode <*dliste<Type>> constructeur (<*dliste<Type>> soit) fait 
        soit = <*dliste<Type>>(!mallom(!taillede(<dliste<Type>>)));
        soit.taille = 0;
        soit.max = 8;
        soit.mem = <[_]Type>(!mallom(!taillede(<Type>) * soit.max));
        renvoie soit;
    fin
    
    methode <rien> constructeur_pile (<*dliste<Type>> soit) fait 
        soit.taille = 0;
        soit.max = 8;
        soit.mem = <[_]Type>(!mallom(!taillede(<Type>) * soit.max));
    fin

    methode <rien> destructeur (<*dliste<Type>> soit) fait
        !libere(<*rien>(soit.mem));
    fin
    
    methode <rien> remaniement (<*dliste<Type>> soit, <ent> max) fait 
        soit.max = max;
        <[_]Type> nouv = <[_]Type>(!mallom(!taillede(<Type>) * (soit.max + 1))); // on prend un de plus pour éviter les débordement de mémoire
        pour i dans [0, soit.taille] fait 
            nouv[i] = soit.mem[i];
            soit.mem[i] = <Type>0;
        fin
        !libere(<*rien>soit.mem);
        soit.mem = nouv;
    fin

    methode <rien> ajoute(<*dliste<Type>> soit, <Type> x) fait
        si soit.taille + 1 == soit.max fait 
            !soit.remaniement(soit.max * 2);
        fin
        soit.mem[soit.taille] = x;
        soit.taille = soit.taille + 1;
    fin

    methode <Type> pop (<*dliste<Type>> soit, <ent> index) fait 
        si index >= soit.taille fait 
            !erreur("!dliste.pop : L'index est plus grand que la taille de la liste");
        fin
        r = soit.mem[index];
        pour i dans [index, soit.taille - 1] fait 
            soit.mem[i] = soit.mem[i + 1];
        fin
        soit.mem[soit.taille] = <Type>0; // On détruit la valeur finale pour plus de sécurité
        soit.taille = soit.taille - 1;
        si soit.taille <= soit.max/2 && soit.max > 8 fait 
            !soit.remaniement(soit.max/2);
        fin
        renvoie r;
    fin

    methode <Type> index (<*dliste<Type>> soit, <ent> index) fait
        si index < 0 fait
            index = soit.taille + index;
            si index < 0 fait
                !erreur("!dliste.index : L'index est plus grand que la taille de la liste");
            fin
        fin
        si index >= soit.taille fait 
            !println(index);
            !println(soit.taille);
            !erreur("!dliste.index : L'index est plus grand que la taille de la liste");
        fin
        renvoie soit.mem[index];
    fin

    methode <rien> assigne_index(<*dliste<Type>> soit, <ent> index, <Type> x) fait 
        si index >= soit.taille fait 
            !erreur("!dliste.assigne_index : L'index est plus grand que la taille de la liste");
        fin
        soit.mem[index] = x;
    fin

    methode <rien> println(<*dliste<Type>> soit) fait 
        !print('[');!print(' ');
        pour i dans [0, soit.taille] fait
            e = soit.mem[i];
            !print(e);
            !print(' ');
        fin
        !println(']');
    fin

    methode <dliste_it<Type>> debut(<*dliste<Type>> soit) fait 
        renvoie <Type>dliste_it&(soit);
    fin
fin

classe <Type> dliste_it IT contient
    <ent> index;
    <*dliste<Type>> liste;

    methode <*dliste_it<Type>> constructeur(<*dliste_it<Type>> soit, <*dliste<Type>> liste) fait 
        soit = <*dliste_it<Type>>(!mallom(!taillede(<dliste_it<Type>>)));
        soit.index = 0;
        soit.liste = liste;
        renvoie soit;
    fin
    
    methode <rien> constructeur_pile(<*dliste_it<Type>> soit, <*dliste<Type>> liste) fait 
        soit.index = 0;
        soit.liste = liste;
    fin

    methode <Type> suivant(<*dliste_it<Type>> soit) fait 
        r = !soit.liste.index(soit.index);
        soit.index = soit.index + 1;
        renvoie r;
    fin

    methode <bool> fin(<*dliste_it<Type>> soit) fait 
        si soit.index == soit.liste.taille fait 
            renvoie Vrai;
        fin
        renvoie Faux;
    fin
fin
