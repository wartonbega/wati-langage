inclue "listes.wati";

deftype ent8 1;
deftype ent16 2;
deftype ent32 4;

nomenclature <type_t, type_t_2> entiers_impl_op dans fait 
    fonction <type_t> type_t._ou             (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) || x );   fin
    fonction <type_t> type_t._et             (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) && x );   fin
    fonction <bool> type_t._plus_petit_eg    (<type_t> soit, <type_t_2>x) fait renvoie           <type_t_2>(soit) <= x  ;   fin
    fonction <bool> type_t._plus_grand_eg    (<type_t> soit, <type_t_2>x) fait renvoie           <type_t_2>(soit) >= x  ;   fin
    fonction <bool> type_t._pas_eg           (<type_t> soit, <type_t_2>x) fait renvoie           <type_t_2>(soit) != x  ;   fin
    fonction <bool> type_t._egal             (<type_t> soit, <type_t_2>x) fait renvoie           <type_t_2>(soit) == x  ;   fin
    fonction <bool> type_t._plus_petit       (<type_t> soit, <type_t_2>x) fait renvoie           <type_t_2>(soit) <  x  ;   fin
    fonction <bool> type_t._plus_grand       (<type_t> soit, <type_t_2>x) fait renvoie           <type_t_2>(soit) >  x  ;   fin
    fonction <type_t> type_t._fois           (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) *  x );   fin
    fonction <type_t> type_t._div            (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) /  x );   fin
    fonction <type_t> type_t._plus           (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) +  x );   fin
    fonction <type_t> type_t._moins          (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) -  x );   fin
    fonction <type_t> type_t._modulo         (<type_t> soit, <type_t_2>x) fait renvoie <type_t>( <type_t_2>(soit) %  x );   fin
fin

nomenclature <type_t> entiers_impl_dyn_op dans fait 
    fonction <type_t> type_t._negatif (<type_t> soit) fait renvoie <type_t>( 0 - <ent>(soit) ); fin
    fonction <type_t> type_t._shift_droit    (<type_t> soit, <type_t> x) fait pour i dans [0, x] fait soit = soit / 2; fin renvoie soit; fin
    fonction <type_t> type_t._shift_gauche   (<type_t> soit, <type_t> x) fait pour i dans [0, x] fait soit = soit * 2; fin renvoie soit; fin
fin

nomenclature <type_t> entiers_impl dans fait
    fonction <type_t> type_t._puissance (<type_t> soit, <ent> exp) fait  
        res = <type_t>1;
        tant que exp > 0 fait 
            res = soit * res;
            exp = exp - 1;
        fin
        renvoie res;
    fin

    fonction <ent> puissance_dix(<type_t> x) fait 
        <ent> l = 1;
        <ent> c = 0;
        tant que x / l > 0 fait 
            l = l * 10;
            c = c + 1;
        fin
        renvoie c;
    fin

    fonction <ent> puissance_seize(<type_t> x) fait 
        <ent> l = 1;
        <ent> c = 0;
        tant que x / l > 0 fait 
            l = l * 16;
            c = c + 1;
        fin
        renvoie c;
    fin

    fonction <ent> puissance_base(<type_t> x, <ent> b) fait 
        <ent> l = 1;
        <ent> c = 0;
        tant que x / l > 0 fait 
            l = l * b;
            c = c + 1;
        fin
        renvoie c;
    fin

    fonction <[_]chr> ent_en_chaine(<type_t> x) fait 
        si x == 0 fait 
            <[_] chr> g = <[_]chr>!mallom(1);
            g[0] = '0';
            renvoie g;
        fin
        puiss = !puissance_dix(x);
        max_puiss = puiss;
        <[_]chr> g = !init_liste(puiss);
        tant que puiss > 0 fait 
            reste = x / 10;
            prime = x % 10;
            puiss = puiss - 1;
            g[puiss] = <chr>(prime + 48);
            x = reste;
        fin
        renvoie g;
    fin

    fonction <[_]chr> hex(<type_t> x) fait 
        si x == 0 fait 
            renvoie "0x0";
        fin
        puiss = !puissance_seize(x);
        max_puiss = puiss;
        <[_]chr> g = !init_liste(puiss + 2);
        g[0] = '0';
        g[1] = 'x';
        tant que puiss > 0 fait 
            reste = x / 16;
            prime = x % 16;
            puiss = puiss - 1;
            si prime >= 10 fait
                g[puiss + 2] = <chr>(prime + 97 - 10);
            fin sinon fait
                g[puiss + 2] = <chr>(prime + 48);
            fin
            x = reste;
        fin
        renvoie g;
    fin
    
    fonction <[_]chr> bin(<type_t> x) fait 
        si x == 0 fait 
            renvoie "0";
        fin
        puiss = !puissance_base(x, 2);
        max_puiss = puiss;
        <[_]chr> g = !init_liste(puiss);
        tant que puiss > 0 fait 
            reste = x / 2;
            prime = x % 2;
            puiss = puiss - 1;
            g[puiss] = <chr>(prime + 48);
            x = reste;
        fin
        renvoie g;
    fin

    fonction <[_]chr> base(<type_t> x, <ent> base) fait 
        si x == 0 fait 
            renvoie "0";
        fin
        puiss = !puissance_base(x, base);
        max_puiss = puiss;
        b = !ent_en_chaine(base);
        long_base = !long(b);
        <[_]chr> g = !init_liste(puiss + 3 + long_base);
        g[0] = '[';
        !copie(1, g, b);
        g[1 + long_base] = ']';
        decal = 2 + long_base;
        tant que puiss > 0 fait 
            reste = x / base;
            prime = x % base;
            puiss = puiss - 1;
            si prime >= 10 fait
                g[puiss + decal] = <chr>(prime + 97 - 10);
            fin sinon fait
                g[puiss + decal] = <chr>(prime + 48);
            fin
            x = reste;
        fin
        renvoie g;
    fin

    fonction <rien> print(<type_t> x) fait 
        si x < 0 fait 
            !print('-');
            !print(!ent_en_chaine(-x));
        fin sinon fait
            !print(!ent_en_chaine(x));
        fin
    fin

    fonction <rien> println(<type_t> x) fait 
        !print(x);
        !print('\n');
    fin

    fonction <rien> type_t.print(<type_t> soit) fait 
        !print(soit);
    fin
    
    fonction <rien> type_t.println(<type_t> soit) fait 
        !println(soit);
    fin
fin




%sidef ENT8_IMP fait
    utilise <ent8, ent> entiers_impl_op;
    utilise <ent8> entiers_impl_dyn_op;
    utilise <ent8, ent8> entiers_impl_op;
    utilise <ent8> entiers_impl;
fin

%sidef ENT16_IMP fait
    utilise <ent16, ent> entiers_impl_op;
    utilise <ent16> entiers_impl_dyn_op;
    utilise <ent16, ent16> entiers_impl_op;
    utilise <ent16> entiers_impl;
fin

%sidef ENT32_IMP fait
    utilise <ent32, ent> entiers_impl_op;
    utilise <ent32> entiers_impl_dyn_op;
    utilise <ent32, ent32> entiers_impl_op;
    utilise <ent32> entiers_impl;
fin

utilise <ent> entiers_impl_dyn_op;
utilise <ent> entiers_impl;

fonction <ent> chr_en_ent (<chr> x) fait 
    si x == '1' fait 
        renvoie 1;
    fin sinonsi x == '2' fait 
        renvoie 2;
    fin sinonsi x == '3' fait 
        renvoie 3;
    fin sinonsi x == '4' fait 
        renvoie 4;
    fin sinonsi x == '5' fait 
        renvoie 5;
    fin sinonsi x == '6' fait 
        renvoie 6;
    fin sinonsi x == '7' fait 
        renvoie 7;
    fin sinonsi x == '8' fait 
        renvoie 8;
    fin sinonsi x == '9' fait 
        renvoie 9;
    fin
    renvoie 0;
fin

fonction <ent> liste_en_ent(<[_]chr> liste) fait 
    l = !long(liste);
    x = 0;
    dix = 1;
    i = l - 1;
    tant que i >= 0 fait 
        x = x + !chr_en_ent(liste[i]) * dix;
        dix = dix * 10;
        i = i - 1;
    fin
    renvoie x;
fin