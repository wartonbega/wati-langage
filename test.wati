inclue "./std/std.watiH";
inclue "./std/pile.wati";

!println("Calculette en rpm. Op√©rateurs disponibles : + - * /. Commandes disponibles : 'pop', 'swap'");

fonction <bool> est_operateur(<chr> x) fait 
    renvoie x == '+' || x == '-' || x == '*' || x == '/';
fin

fonction <bool> est_commande(<[_]chr> tamp) fait 
    renvoie tamp == "pop" || tamp == "swap";
fin

fonction <ent> opere (<ent> a, <ent> b, <chr> op) fait 
    si op == '+' fait 
        renvoie a + b;
    fin sinonsi op == '-' fait 
        renvoie a - b;
    fin sinonsi op == '*' fait 
        renvoie a * b;
    fin sinonsi op == '/' fait 
        renvoie a / b;
    fin
    renvoie 0;
fin

pile = <ent>pile();

cont = Vrai;

<[_]chr> tamp = <[_]chr>!mallom(1024);

fonction <ent> liste_en_ent(<[_]chr> liste) fait 
    l = !long(liste);
    x = 0;
    dix = 1;
    i = l - 1;
    tant que i >= 0 fait 
        x = x + !chr_en_ent(liste[i]) * dix;
        dix = dix * 10;
        i = i - 1;
    fin
    renvoie x;
fin

tant que cont fait 
    !metmoire(<*rien>tamp, '', 1024);
    !print(" $ "); !input(tamp, 1024);
    l = !long(tamp);
    si tamp[l - 1] == '\n' fait 
        tamp[l - 1] = '';
    fin
    si !est_operateur(tamp[0]) fait 
        si pile.taille < 2 fait  //>
            !erreur("La pile est trop petite");
        fin
        a = !pile.pop();
        b = !pile.pop();
        r = !opere(a, b, tamp[0]);
        !pile.ajoute(r);
        !print("--> "); !println(r);
    fin sinonsi !est_commande(tamp) fait 
        si tamp == "pop" fait 
            !pile.pop();
        fin sinonsi tamp == "swap" fait 
            a = !pile.pop();
            b = !pile.pop();
            !pile.ajoute(a);
            !pile.ajoute(b);
        fin
    fin sinon fait
        n = !liste_en_ent(tamp);
        !pile.ajoute(n);
    fin
    !pile.println();
fin