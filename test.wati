fonction println(x) fait
    (!print(x, "\n"))
fin

classe node contient
    methode constructeur (content) fait
        self.content = content;
    fin

    methode en_string() fait
        renvoie self.content;
    fin

    methode equals (autre) fait
        renvoie self.content == autre.content;
    fin

    methode ne (autre) fait
        renvoie self.content != autre.content;
    fin
fin

classe list contient 
    methode constructeur () fait
        self.head = node("fin-de-liste");
        self.tail = node("fin-de-liste");
        
        self.head.next = self.tail;
        self.tail.prev = self.head;

        self.taille = 0;
    fin

    methode plus(content) fait
        n = node(content);
        n.next = self.tail;
        
        prev = self.tail.prev;
        n.prev = prev;
        prev.next = n;
        self.tail.prev = n;
        
        self.taille = self.taille + 1;
        renvoie self;
    fin
    
    methode print() fait
        (!print("[ "))
        n = self.head.next;
        tant que n.next.content != self.tail.content fait
            (!print(n.content, ", "))
            n = n.next;
        fin
        (!print(n.content, " ]\n"))
    fin

    methode en(x) fait
        i = 0;
        n = self.head.next;
        tant que i != x fait
            n = n.next;
            i = i + 1;
        fin
        p = n.content;

        renvoie p;
    fin
fin

classe string contient
    methode constructeur (contenu) fait
        self.content = list();
    fin

    methode plus_string (str) fait
        pour i allant de 0 a str.content.taille fait
            self = self + !str.content.en(i);
        fin
        renvoie self;
    fin

    methode plus (char) fait
        si !type(char) == "char" fait
            (self.content + char)
        fin
        si !type(char) == "string" fait
            (!self.plus_string(char))
        fin
        renvoie self;
    fin

    methode times (int) fait
        patent = string("");
        pour i allant de 0 a int fait
            patent = patent + self;
        fin
        renvoie patent;
    fin

    methode en_string () fait
        res = "";
        pour y allant de 0 a self.content.taille fait
            res = res + !self.content.en(y);
        fin
        renvoie res;
    fin
fin

classe dictionnaire contient
    methode constructeur () fait
        self.keys = list();
        self.value = list();
    fin

    methode associe (clef, valeur) fait
        self.keys = self.keys + clef;
        self.value = self.value + valeur;
    fin

    methode trouve (clef) fait
        valeur = 0;
        pour i allant de 0 a (self.keys.taille) fait
            si (!self.keys.en(i) == clef) alors
                valeur = !self.value.en(i);
            fin
        fin
        renvoie valeur;
    fin
fin

s = string("");
s = s + "a";
s = s + "a";
s = s + "a";


m = dictionnaire();
!m.associe("createur", "anton appel")
!m.associe("nom", "wati-lang")
!println(!m.trouve("nom"))