inclue "std.wati";
inclue "w_graphs/wati_graphs_events.wati";
inclue "w_graphs/wati_graphs_textures.wati";

classe game contient
    methode constructeur () fait
        self.map = list();
        self.map_save = list();
        pour i allant de 0 a 4 fait
            l = list();
            l_ = list();
            pour i allant de 0 a 4 fait
                !l.plus(0)
                !l_.plus(0)
            fin
            !self.map_save.plus(l_)
            !self.map.plus(l)
        fin
        (self.map[0]!.modifie(0, 1024))
        (self.map[0]!.modifie(1, 1024))

        self.random = random();

        self.window_w = 600;
        self.window_h = 600;
        !init_window(self.window_w, self.window_h)
        !load_font_as("font.ttf", "font.ttf", 100)
        self.size = self.window_h / 4;
        self.anti_repett = 1;
        self.last_x = 0;
        self.last_y = 0;

        self.state = "game";
    fin

    methode color (num) fait
        si num <= 2 alors
            !set_color(224, 193, 16, 255)
        sinonsi num <= 4 alors
            !set_color(224, 158, 16, 255)
        sinonsi num <= 8 alors
            !set_color(144, 224, 16, 255)
        sinonsi num <= 16 alors
            !set_color(99, 140, 34, 255)
        sinonsi num <= 32 alors
            !set_color(17, 150, 46, 255)
        sinonsi num <= 64 alors
            !set_color(150, 128, 17, 255)
        sinonsi num <= 128 alors
            !set_color(150, 95, 17, 255)
        sinonsi num <= 256 alors
            !set_color(209, 132, 23, 255)
        sinonsi num <= 512 alors
            !set_color(255, 85, 0, 255)
        sinonsi num <= 1024 alors
            !set_color(255, 0, 0, 255)
        sinonsi num <= 2048 alors
            !set_color(!self.random.rand(255), !self.random.rand(255), !self.random.rand(255), 255)
        fin
    fin

    methode copy_save () fait
        pour x allant de 0 a self.map.taille fait
            pour y allant de 0 a self.map.taille fait
                (self.map_save[x]!.modifie(y, self.map[x][y]))
            fin
        fin
    fin

    methode load_copy () fait
        pour x allant de 0 a self.map.taille fait
            pour y allant de 0 a self.map.taille fait
                (self.map[x]!.modifie(y, self.map_save[x][y]))
            fin
        fin
    fin

    methode draw_square (x, y, num) fait

        si !et(x == self.last_x, y == self.last_y) alors
            !set_color(0, 0, 0, 255)
            !fill_rect(x * self.size, y * self.size, self.window_w/4, self.window_h/4)
        fin
        !self.color(num)
        !fill_rect(x * self.size + 2, y * self.size + 2, self.window_w/4 - 4, self.window_h/4 - 4)
        !set_color(0, 0, 0, 255)
        !draw_text(x * self.size + 5, y * self.size + 5, self.window_w/4 - 10, self.window_h/4 - 10, !char(num), "font.ttf")
    fin

    methode loop (events) fait
        si self.state == "game" alors
            !set_color(255, 255, 255, 255)
            !clear()
            pour i allant de 0 a events.taille fait
                event = events[i];
                si !et(event == "KeyDown", self.anti_repett) alors
                    self.anti_repett = 0;
                    si event == "Left" alors
                        !self.copy_save()
                        !self.left()
                        !self.chose_case()
                    sinonsi event == "Right" alors
                        !self.copy_save()
                        !self.right()
                        !self.chose_case()
                    sinonsi event == "Up" alors
                        !self.copy_save()
                        !self.up()
                        !self.chose_case()
                    sinonsi event == "Down" alors
                        !self.copy_save()
                        !self.down()
                        !self.chose_case()
                    sinonsi event == "R" alors
                        !self.load_copy()
                    fin
                    
                sinonsi event == "KeyUp" alors
                    self.anti_repett = 1;
                fin
            fin

            pour x allant de 0 a self.map.taille fait
                pour y allant de 0 a self.map.taille fait
                    n = self.map[x][y];
                    si n != 0 alors
                        !self.draw_square(x, y, n)
                    fin
                    si n >= 2048 alors
                        self.state = "win";
                    fin
                fin    
            fin
        sinonsi self.state == "win" alors
            !set_color(255, 255, 255, 255)
            !clear()
            pour x allant de 0 a self.map.taille fait
                pour y allant de 0 a self.map.taille fait
                    n = self.map[x][y];
                    si n != 0 alors
                        !self.draw_square(x, y, n)
                    fin
                fin    
            fin
            !draw_text(10, 10, self.window_h - 10, self.window_w - 10, "Gagne !", "font.ttf")
        fin
        !render()
        renvoie 1;
    fin

    methode left () fait
        pour x allant de 0 a self.map.taille fait
            pour y allant de 0 a self.map.taille fait
                lx = x;
                num = self.map[x][y];
                tant que x > 0 fait
                    pre_num = self.map[x - 1][y];
                    si pre_num == 0 alors
                        (self.map[x - 1]!.modifie(y, self.map[x][y]))
                        (self.map[x]!.modifie(y, 0))
                    sinonsi pre_num == num alors
                        (self.map[x - 1]!.modifie(y, 2 * num))
                        (self.map[x]!.modifie(y, 0))
                        num = 2 * num;
                    sinon
                        casse;
                    fin
                    x = x - 1;
                fin
                x = lx;
            fin
        fin
    fin

    methode right () fait
        pour x allant de 1 a (self.map.taille + 1) fait
            pour y allant de 0 a self.map.taille fait
                lx = x;
                x = self.map.taille - x;
                num = self.map[x][y];
                tant que x + 1 < self.map.taille fait
                    pre_num = self.map[x + 1][y];
                    si pre_num == 0 alors
                        (self.map[x + 1]!.modifie(y, self.map[x][y]))
                        (self.map[x]!.modifie(y, 0))
                    sinonsi pre_num == num alors
                        (self.map[x + 1]!.modifie(y, 2 * num))
                        (self.map[x]!.modifie(y, 0))
                        num = 2 * num;
                    sinon 
                        casse;
                    fin
                    x = x + 1;
                fin
                x = lx;
            fin
        fin
    fin

    methode up () fait
        pour x allant de 0 a self.map.taille fait
            pour y allant de 0 a self.map.taille fait
                num = self.map[x][y];
                tant que y > 0 fait
                    pre_num = self.map[x][y - 1];
                    si pre_num == 0 alors
                        (self.map[x]!.modifie(y - 1, self.map[x][y]))
                        (self.map[x]!.modifie(y, 0))
                    sinonsi pre_num == num alors
                        (self.map[x]!.modifie(y - 1, 2 * num))
                        (self.map[x]!.modifie(y, 0))
                        num = 2 * num;
                    sinon 
                        casse;
                    fin
                    y = y - 1;
                fin
            fin
        fin
    fin

    methode down () fait
        pour x allant de 0 a self.map.taille fait
            pour y allant de 1 a (self.map.taille + 1) fait
                y = self.map.taille - y;
                num = self.map[x][y];
                tant que y + 1 < self.map.taille fait
                    pre_num = self.map[x][y + 1];
                    si pre_num == 0 alors
                        (self.map[x]!.modifie(y + 1, self.map[x][y]))
                        (self.map[x]!.modifie(y, 0))
                    sinonsi pre_num == num alors
                        (self.map[x]!.modifie(y + 1, 2 * num))
                        (self.map[x]!.modifie(y, 0))
                        num = 2 * num;
                    sinon 
                        casse;
                    fin
                    y = y + 1;
                fin
            fin
        fin
    fin

    methode find_free_cases () fait
        xs = list();
        ys = list();
        pour x allant de 0 a self.map.taille fait
            pour y allant de 0 a self.map.taille fait
                num = self.map[x][y];
                si num == 0 alors
                    !xs.plus(x)
                    !ys.plus(y)
                fin
            fin
        fin
        renvoie (xs, ys);
    fin

    methode chose_case () fait
        l = !self.find_free_cases();
        xs = l[0];
        ys = l[1];
        si xs.taille == 0 alors
            renvoie 0;
        fin
        index = !self.random.rand(xs.taille);
        x = xs[index];
        y = ys[index];
        (self.map[x]!.modifie(y, 2))
        self.last_x = x;
        self.last_y = y;
    fin
fin

self = game();
!mainloop(!self.loop)